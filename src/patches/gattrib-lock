Index: src/bluez/attrib/gattrib.c
===================================================================
--- src.orig/bluez/attrib/gattrib.c
+++ src/bluez/attrib/gattrib.c
@@ -39,6 +39,7 @@ struct _GAttrib {
 	struct bt_att *att;
 	struct bt_gatt_client *client;
 	GIOChannel *io;
+	struct _GAttribLock *lk;
 	GDestroyNotify destroy;
 	gpointer destroy_user_data;
 	struct queue *callbacks;
@@ -59,6 +60,12 @@ struct attrib_callbacks {
 
 GAttrib *g_attrib_new(GIOChannel *io, guint16 mtu, bool ext_signed)
 {
+	return g_attrib_withlock_new(io, mtu, ext_signed, NULL);
+}
+
+GAttrib *g_attrib_withlock_new(GIOChannel *io, guint16 mtu, bool ext_signed,
+	struct _GAttribLock *lk)
+{
 	gint fd;
 	GAttrib *attr;
 
@@ -72,6 +79,7 @@ GAttrib *g_attrib_new(GIOChannel *io, gu
 
 	g_io_channel_ref(io);
 	attr->io = io;
+	attr->lk = lk;
 
 	attr->att = bt_att_new(fd, ext_signed);
 	if (!attr->att)
Index: src/bluez/attrib/gattrib.h
===================================================================
--- src.orig/bluez/attrib/gattrib.h
+++ src/bluez/attrib/gattrib.h
@@ -23,6 +23,11 @@ struct bt_gatt_client;  /* Forward decla
 struct _GAttrib;
 typedef struct _GAttrib GAttrib;
 
+struct _GAttribLock {
+  void (*lockfn)(struct _GAttribLock *l);
+  void (*unlockfn)(struct _GAttribLock *l);
+};
+
 typedef void (*GAttribResultFunc) (guint8 status, const guint8 *pdu,
 					guint16 len, gpointer user_data);
 typedef void (*GAttribDisconnectFunc)(gpointer user_data);
@@ -31,6 +36,8 @@ typedef void (*GAttribNotifyFunc)(const
 							gpointer user_data);
 
 GAttrib *g_attrib_new(GIOChannel *io, guint16 mtu, bool ext_signed);
+GAttrib *g_attrib_withlock_new(GIOChannel *io, guint16 mtu, bool ext_signed,
+			struct _GAttribLock *lk);
 GAttrib *g_attrib_ref(GAttrib *attrib);
 void g_attrib_unref(GAttrib *attrib);
 
Index: src/bluez/btio/btio.c
===================================================================
--- src.orig/bluez/btio/btio.c
+++ src/bluez/btio/btio.c
@@ -97,6 +97,63 @@ struct server {
 	GDestroyNotify destroy;
 };
 
+GMainContext *btcontext = NULL;
+
+void bt_io_set_context(GMainContext *c)
+{
+  	btcontext = c;
+}
+
+guint x_g_io_add_watch(GIOChannel *channel,
+                       GIOCondition condition,
+                       GIOFunc func,
+                       gpointer user_data)
+{
+    GSource *s = g_io_create_watch(channel, condition);
+    g_source_set_callback(s, (GSourceFunc)func, user_data, NULL);
+    guint id = g_source_attach(s, btcontext);
+    g_source_unref(s);
+    return id;
+}
+
+guint x_g_io_add_watch_full(GIOChannel *channel,
+                            gint priority,
+                            GIOCondition condition,
+                            GIOFunc func,
+                            gpointer user_data,
+                            GDestroyNotify notify)
+{
+    GSource *s = g_io_create_watch(channel, condition);
+    if (priority != G_PRIORITY_DEFAULT)
+        g_source_set_priority(s, priority);
+    g_source_set_callback(s, (GSourceFunc)func, user_data, notify);
+    guint id = g_source_attach(s, btcontext);
+    g_source_unref(s);
+    return id;
+}
+
+guint x_g_timeout_add_seconds(guint interval,
+                              GSourceFunc function,
+                              gpointer data)
+{
+    GSource *s = g_timeout_source_new_seconds(interval);
+    g_source_set_callback(s, function, data, NULL);
+    guint id = g_source_attach(s, btcontext);
+    g_source_unref(s);
+    return id;
+}
+
+gboolean x_g_source_remove(guint tag)
+{
+    GSource *source = g_main_context_find_source_by_id(btcontext, tag);
+    if (source)
+        g_source_destroy(source);
+    else
+        g_critical("Source ID %u was not found when attempting to remove it", tag);
+
+    return source != NULL;
+}
+
 static BtIOType bt_io_get_type(GIOChannel *io, GError **gerr)
 {
 	int sk = g_io_channel_unix_get_fd(io);
Index: src/bluez/btio/btio.h
===================================================================
--- src.orig/bluez/btio/btio.h
+++ src/bluez/btio/btio.h
@@ -72,6 +72,27 @@ typedef void (*BtIOConfirm)(GIOChannel *
 
 typedef void (*BtIOConnect)(GIOChannel *io, GError *err, gpointer user_data);
 
+/* These glib overrides ensure that all our callbacks fire on the
+ * correct thread. */
+void bt_io_set_context(GMainContext *c);
+
+guint x_g_io_add_watch(GIOChannel *channel,
+				GIOCondition condition,
+				GIOFunc func,
+				gpointer user_data);
+
+guint x_g_io_add_watch_full(GIOChannel *channel,
+				gint priority,
+				GIOCondition condition,
+				GIOFunc func,
+				gpointer user_data,
+				GDestroyNotify notify);
+
+guint x_g_timeout_add_seconds(guint interval,
+				GSourceFunc function,
+				gpointer data);
+gboolean x_g_source_remove(guint tag);
+
 gboolean bt_io_accept(GIOChannel *io, BtIOConnect connect, gpointer user_data,
 					GDestroyNotify destroy, GError **err);
 
Index: src/bluez/attrib/gatttool.h
===================================================================
--- src.orig/bluez/attrib/gatttool.h
+++ src/bluez/attrib/gatttool.h
@@ -13,5 +13,5 @@ int interactive(const char *src, const c
 GIOChannel *gatt_connect(const char *src, const char *dst,
 			const char *dst_type, const char *sec_level,
 			int psm, int mtu, BtIOConnect connect_cb,
-			GError **gerr);
+			GError **gerr, gpointer user_data);
 size_t gatt_attr_data_from_string(const char *str, uint8_t **data);
Index: src/bluez/attrib/utils.c
===================================================================
--- src.orig/bluez/attrib/utils.c
+++ src/bluez/attrib/utils.c
@@ -31,7 +31,7 @@
 GIOChannel *gatt_connect(const char *src, const char *dst,
 				const char *dst_type, const char *sec_level,
 				int psm, int mtu, BtIOConnect connect_cb,
-				GError **gerr)
+				GError **gerr, gpointer user_data)
 {
 	GIOChannel *chan;
 	bdaddr_t sba, dba;
@@ -64,7 +64,7 @@ GIOChannel *gatt_connect(const char *src
 		sec = BT_IO_SEC_LOW;
 
 	if (psm == 0)
-		chan = bt_io_connect(connect_cb, NULL, NULL, &tmp_err,
+		chan = bt_io_connect(connect_cb, user_data, NULL, &tmp_err,
 				BT_IO_OPT_SOURCE_BDADDR, &sba,
 				BT_IO_OPT_SOURCE_TYPE, BDADDR_LE_PUBLIC,
 				BT_IO_OPT_DEST_BDADDR, &dba,
@@ -73,7 +73,7 @@ GIOChannel *gatt_connect(const char *src
 				BT_IO_OPT_SEC_LEVEL, sec,
 				BT_IO_OPT_INVALID);
 	else
-		chan = bt_io_connect(connect_cb, NULL, NULL, &tmp_err,
+		chan = bt_io_connect(connect_cb, user_data, NULL, &tmp_err,
 				BT_IO_OPT_SOURCE_BDADDR, &sba,
 				BT_IO_OPT_DEST_BDADDR, &dba,
 				BT_IO_OPT_PSM, psm,
Index: src/bluez/attrib/att.c
===================================================================
--- src.orig/bluez/attrib/att.c
+++ src/bluez/attrib/att.c
@@ -74,7 +74,7 @@ const char *att_ecode2str(uint8_t status
 	case ATT_ECODE_IO:
 		return "Internal application error: I/O";
 	case ATT_ECODE_TIMEOUT:
-		return "A timeout occured";
+		return "A timeout occurred";
 	case ATT_ECODE_ABORTED:
 		return "The operation was aborted";
 	default:
